var parse5 = require('parse5')
var parser = new parse5.Parser(null, { locationInfo: true })
var cache = require('lru-cache')(100)
var SourceMapGenerator = require('source-map').SourceMapGenerator
var hash = require('hash-sum')
var deindent = require('./deindent')
var splitRE = /\r?\n/g
var emptyRE = /^\s*$/
var commentSymbols = {
  'coffee': '#',
  'coffee-jsx': '#',
  'coffee-redux': '#',
  'purs': '--',
  'ulmus': '--'
}

module.exports = function (content, filename, needMap) {

  var cacheKey = hash(filename + content)
  // source-map cache busting for hot-reloadded modules
  var filenameWithHash = filename + '?' + cacheKey
  var output = cache.get(cacheKey)
  if (output) return output

  output = {
    template: [],
    style: [],
    script: [],
    styleImports: []
  }

  var fragment = parser.parseFragment(content)

  fragment.childNodes.forEach(function (node) {
    var type = node.tagName
    var lang = getAttribute(node, 'lang')
    var src = getAttribute(node, 'src')
    var scoped = getAttribute(node, 'scoped') != null

    // node count check
    if (
      (type === 'script' || type === 'template') &&
      output[type].length > 0
    ) {
      throw new Error(
        '[vue-loader] Only one <script> or <template> tag is ' +
        'allowed inside a Vue component.'
      )
    }

    // handle src imports
    if (src) {
      if (type === 'style') {
        output.styleImports.push({
          src: src,
          lang: lang,
          scoped: scoped
        })
      } else if (type === 'template') {
        output.template.push({
          src: src,
          lang: lang
        })
      } else if (type === 'script') {
        output.script.push({
          src: src,
          lang: lang
        })
      }
      return
    }

    if (!node.childNodes || !node.childNodes.length) {
      return
    }

    if (!output[type]) {
      return
    }

    // Work around changes in parse5 >= 1.2.0
    if (node.childNodes[0].nodeName === '#document-fragment') {
      node = node.childNodes[0]
      if (!node.childNodes.length) {
        return
      }
    }

    // extract part
    var start = node.childNodes[0].__location.start
    var end = node.childNodes[node.childNodes.length - 1].__location.end
    var result
    var lineOffset
    if (type === 'script') {
      lineOffset = 0
      // preserve other parts as commenets so that linters
      // and babel can output correct line numbers in warnings
      result =
        commentScript(content.slice(0, start), lang) +
        deindent(content.slice(start, end)) +
        commentScript(content.slice(end), lang)
    } else {
      lineOffset = content.slice(0, start).split(splitRE).length - 1
      result = content.slice(start, end)
    }

    if (needMap) {
      // generate source map
      var map = new SourceMapGenerator()
      map.setSourceContent(filenameWithHash, content)

      // do not add mappings for comment lines - babel's source map
      // somehow gets messed up because of it
      var isCommentLine = function (line) {
        return type === 'script' &&
          line.indexOf(getCommentSymbol(lang)) === 0
      }

      result.split(splitRE).forEach(function (line, index) {
        if (!emptyRE.test(line) && !isCommentLine(line)) {
          map.addMapping({
            source: filenameWithHash,
            original: {
              line: index + 1 + lineOffset,
              column: 0
            },
            generated: {
              line: index + 1,
              column: 0
            }
          })
        }
      })
      // workaround for Webpack eval-source-map bug
      // https://github.com/webpack/webpack/pull/1816
      // in case the script was piped through another loader
      // that doesn't pass down the source map properly.
      if (type === 'script' && !lang) {
        result += '\n/* generated by vue-loader */\n'
      }
    }

    output[type].push({
      lang: lang,
      scoped: scoped,
      content: result,
      map: map && map.toJSON()
    })
  })

  cache.set(cacheKey, output)
  return output
}

function commentScript (content, lang) {
  var symbol = getCommentSymbol(lang)
  return content
    .split(splitRE)
    .map(function (line) {
      return symbol + (emptyRE.test(line) ? '' : ' ' + line)
    })
    .join('\n')
}

function getCommentSymbol (lang) {
  return commentSymbols[lang] || '//'
}

function getAttribute (node, name) {
  if (node.attrs) {
    var i = node.attrs.length
    var attr
    while (i--) {
      attr = node.attrs[i]
      if (attr.name === name) {
        return attr.value
      }
    }
  }
}
